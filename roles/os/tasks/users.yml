---
- name: Validate the `users` variable
  ansible.builtin.include_tasks: validate_users.yml

- name: Ensure the requested groups are present
  ansible.builtin.group:
    name: "{{ item }}"
    state: present
  loop: "{{ users | sum(attribute='groups', start=[]) | list | unique }}"

- name: Ensure the `sudo` group has sudo privileges
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^%sudo"
    line: "%sudo ALL=(ALL:ALL) ALL"
    validate: "/usr/sbin/visudo -cf %s"

- name: Ensure that at least the `admin_user` is in the `sudo` group
  ansible.builtin.assert:
    that:
      - "{% for user in users if user.name == admin_user %}{{ 'sudo' in
        user.groups }}{% else %}{{ false }}{% endfor %}"
      - "{% for user in users if user.name == admin_user %}{{ user.password is
        defined }}{% else %}{{ false }}{% endfor %}"
    msg:
      You must add `sudo` to the `groups` for admin_user (in `users` hash), and
      set a password for the `admin_user`. Otherwise Ansible could lose the
      ability to run the necessary sudo commands.
  tags: ssh

- name: Set up users
  ansible.builtin.user:
    name: "{{ item.name }}"
    group: "{{ item.groups[0] }}"
    groups: "{{ item.groups | join(',') }}"
    password:
      '{% for user in users if user.name == item.name and user.password is
      defined %}{{ user.password | password_hash("sha512", (user.salt |
      default(""))[:16] | regex_replace("[^\.\/a-zA-Z0-9]", "x")) }}{% else %}{{
      "!" }}{% endfor %}'
    state: present
    shell: /bin/bash
    update_password: "{{ item.update_password | default('always') }}"
  loop: "{{ users }}"
  loop_control:
    label: "{{ item.name }}"

- name: Add user SSH keys
  ansible.posix.authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
  loop: "{{ users | default([]) | subelements('keys') }}"
  loop_control:
    label: "{{ item.0.name }}"

- name: Check whether Ansible can connect as `admin_user`
  ansible.builtin.command:
    ansible {{ inventory_hostname }} -m ping -u {{ admin_user }} {{ cli_options
    | default('') }}
  delegate_to: localhost
  failed_when: false
  changed_when: false
  become: false
  register: admin_user_status
  when: ansible_user != admin_user or cli_ask_pass
  tags: [connection-tests, ssh]

- name: Show the connection warnings
  ansible.builtin.import_tasks: user_connection_warnings.yml
  when: admin_user_status is not skipped and admin_user_status.rc != 0
  tags: [connection-tests, ssh]
# vi: ft=yaml.ansible
